{"version":3,"sources":["components/Card/CardMainContent.js","components/Card/Card.js","components/Button/AddInputsBtn.js","components/Button/RemoveInputsBtn.js","components/Form/AnswerAndExampleInputs.js","components/Form/Input.js","components/Form/CategoryInput.js","components/Form/Form.js","components/App/App.js","serviceWorker.js","index.js"],"names":["CardMainContent","props","cardData","handleDeleteItem","handleEditItem","answers","links","tags","company","categories","map","answer","key","shortid","generate","className","example","language","style","atomOneDarkReasonable","length","link","index","linkName","href","tag","category","onClick","Card","useState","fullWidth","toggleCardFullWidth","id","classes","question","AddInputsBtn","children","handleAddNewInputs","icon","faPlusCircle","RemoveAnswerBtn","handleRemoveInputs","faMinusCircle","AnswerAndExampleInputs","updateCardAttribute","allowTabs","htmlFor","type","name","value","onChange","e","onKeyDown","required","placeholder","RemoveInputsBtn","Inputs","label","afterLabel","includeAddRemoveButtons","noLabel","includeButtons","elemToRemove","CategoryInput","selectedValue","updateSelectedValue","target","INITIALSTATE","cardContentsStringified","Form","state","newEntry","setState","Array","isArray","newArray","field","newFields","slice","indexOfClickedBtn","filter","item","itemIndex","resetState","undefined","stringifyCardContents","toLowerCase","createCard","preventDefault","toggleComponent","t","keyCode","v","s","selectionStart","selectionEnd","substring","showState","console","log","prevProps","formContents","this","formVisible","onSubmit","Input","Component","INITIALFORMCONTENTS","App","cards","organizedCards","search","filteredData","newCardIdNum","componentDidMount","organizeCards","handleCreateCard","newCard","updateExistingCard","increasedCardId","indexOfChosenCard","newCardArray","i","card","push","searchCards","newList","searchTerm","includes","updateSearch","newCardsArr","selectedCard","Object","keys","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48bb323c.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneDarkReasonable } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst CardMainContent = (props) => {\n   let { cardData, handleDeleteItem, handleEditItem } = props,\n      {\n         answers,\n         links,\n         tags,\n         company,\n         categories\n      } = cardData;\n\n   return (\n      <>\n         {answers.map( answer => {\n            return (\n               <div key={shortid.generate()} className=\"card__answer-wrapper\">\n                  <pre className=\"card__answer\">{answer.answer}</pre>\n\n                  {answer.example &&\n                     <div className=\"card__example-wrapper\">\n                        <p className=\"card__example-title\">Example:</p>\n                        <SyntaxHighlighter language=\"javascript\" style={atomOneDarkReasonable}>\n                           {answer.example}\n                        </SyntaxHighlighter>\n                     </div>\n                  }\n               </div>\n            )\n         })}\n         {!links.length && cardData.links.map((link, index) => {\n            let linkName = `Link ${index + 1}`\n            return (\n               <a key={shortid.generate()} href={link}>{linkName}</a>\n            )\n         })}\n         {company && <p>{company}</p>}\n\n         {tags && cardData.tags.map(tag => {\n            return (\n               <p key={shortid.generate()}>{tag}</p>\n            )\n         })}\n         {categories && cardData.categories.map(category => {\n            return (\n               <p key={shortid.generate()}>{category}</p>\n            )\n         })}\n         <button onClick={handleDeleteItem}>DELETE</button>\n         <button onClick={handleEditItem}>Edit</button>\n      </>\n   )\n}\n\nexport default CardMainContent;","import React, { useState } from 'react';\nimport CardMainContent from './CardMainContent';\nimport './Card.scss';\n\nconst Card = (props) => {\n\n  const [fullWidth, toggleCardFullWidth] = useState(false);\n\n  let { cardData, handleDeleteItem, handleEditItem, id } = props,\n      classes = fullWidth ? \"card card--question card--full-width\" : \"card card--question\";\n\n  return (\n    <div onClick={() => toggleCardFullWidth(!fullWidth)} className={classes} >\n      <h3 className=\"card__question\">{cardData.question}</h3>\n\n      {fullWidth &&\n        <CardMainContent\n          cardData={cardData}\n          handleDeleteItem={() => handleDeleteItem(id)}\n          handleEditItem={() => handleEditItem(id)}\n        />\n      }\n\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst AddInputsBtn = (props) => {\n  let {\n    children,\n    category\n  } = props;\n\n\n  return (\n    <>\n      <div\n        className=\"form__button-wrapper\"\n        onClick={() => props.handleAddNewInputs(category)}\n      >\n        <FontAwesomeIcon\n          icon={faPlusCircle}\n          className=\"form__icon\"\n        />\n        <span>{children}</span>\n      </div>\n    </>\n  )\n}\n\nexport default AddInputsBtn;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst RemoveAnswerBtn = (props) => {\n  let { \n    index,\n    category,\n    children\n  } = props,\n    classes = (index === 0) ? \"form__button-wrapper hidden\" : \"form__button-wrapper\";\n\n  return (\n    <>\n      <div\n        className={classes}\n        onClick={() => props.handleRemoveInputs(category)}\n      >\n        <FontAwesomeIcon\n          icon={faMinusCircle} \n          className=\"form__icon\"  \n        />\n        <span>{children}</span>\n      </div>\n    </>\n  )\n}\n\nexport default RemoveAnswerBtn;\n","import React from 'react';\nimport AddInputsBtn from '../Button/AddInputsBtn';\nimport RemoveInputsBtn from '../Button/RemoveInputsBtn';\n\nconst AnswerAndExampleInputs = (props) => {\n    let {\n        answer,\n        example,\n        updateCardAttribute,\n        allowTabs,\n        index,\n        category\n    } = props;\n\n    return (\n        <>\n            <label htmlFor=\"\">Answer</label>\n            <textarea\n                type=\"text\"\n                name=\"answer\"\n                value={answer}\n                onChange={(e) => updateCardAttribute(e, category)}\n                onKeyDown={allowTabs}\n                required\n            />\n\n            <label htmlFor=\"\">Code Example</label>\n            <textarea\n                type=\"text\"\n                name=\"example\"\n                value={example}\n                onChange={(e) => updateCardAttribute(e, category)}\n                onKeyDown={allowTabs}\n                placeholder=\"Optional\"\n            />\n            <div className=\"form__buttons-wrapper\">\n                <AddInputsBtn\n                    category={category}\n                    handleAddNewInputs={(category) => props.handleAddNewInputs(category)}\n                >\n                    Add Answer\n                </AddInputsBtn>\n                <RemoveInputsBtn\n                    index={index}\n                    category={category}\n                    handleRemoveInputs={(category) => props.handleRemoveInputs(category)}\n                >\n                    Remove\n                </RemoveInputsBtn>\n            </div>\n        </>\n    )\n}\n\nexport default AnswerAndExampleInputs;\n","import React from 'react';\nimport AddInputsBtn from '../Button/AddInputsBtn';\nimport RemoveInputsBtn from '../Button/RemoveInputsBtn';\n\nconst Inputs = (props) => {\n    let {\n        value,\n        index,\n        label,\n        afterLabel,\n        category,\n        required,\n        updateCardAttribute,\n        includeAddRemoveButtons,\n        noLabel\n    } = props;\n\n    let placeholder = required ? \"\" : \"Optional\",\n        includeButtons = true;\n\n    if (includeAddRemoveButtons === false) { includeButtons = false };\n\n    return (\n        <>\n            {!noLabel &&\n                <label htmlFor=\"\">{label} {afterLabel}</label>\n            }\n            <input\n                type=\"text\"\n                placeholder={placeholder}\n                name={category}\n                onChange={(e) => updateCardAttribute(e, category)}\n                value={value}\n                required={required}\n            />\n            {includeButtons &&\n                <div className=\"form__buttons-wrapper\">\n                    <AddInputsBtn\n                        category={category}\n                        handleAddNewInputs={(category) => props.handleAddNewInputs(category)}\n                    >\n                        Add {label}\n                    </AddInputsBtn>\n                    <RemoveInputsBtn\n                        index={index}\n                        category={category}\n                        handleRemoveInputs={(elemToRemove) => props.handleRemoveInputs(elemToRemove)}\n                    >\n                        Remove\n                    </RemoveInputsBtn>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Inputs;\n","import React, { useState } from 'react';\nimport AddInputsBtn from '../Button/AddInputsBtn';\nimport RemoveInputsBtn from '../Button/RemoveInputsBtn';\n\nconst CategoryInput = (props) => {\n    let {\n        updateCardAttribute,\n        index,\n        label\n    } = props,\n        category = \"categories\";\n\n    const [selectedValue, updateSelectedValue] = useState('javascript');\n\n    const handleChange = (e) => {\n        updateSelectedValue(e.target.value);\n        updateCardAttribute(e, category, index);\n    }\n\n\n    return (\n        <>\n            <label htmlFor=\"\">{label}</label>\n            <select\n                type=\"text\"\n                placeholder=\"Optional\"\n                name={category}\n                onChange={handleChange}\n                value={selectedValue}\n                required\n            >\n                <option value=\"javascript\">JavaScript</option>\n                <option value=\"react\">React</option>\n                <option value=\"css\">CSS</option>\n                <option value=\"html\">HTML</option>\n                <option value=\"ruby\">Ruby</option>\n            </select>\n            <div className=\"form__buttons-wrapper\">\n                <AddInputsBtn\n                    category={category}\n                    handleAddNewInputs={(category) => props.handleAddNewInputs(category)}\n                >\n                    Add {label}\n                </AddInputsBtn>\n                <RemoveInputsBtn\n                    index={index}\n                    category={category}\n                    handleRemoveInputs={(elemToRemove) => props.handleRemoveInputs(elemToRemove)}\n                >\n                    Remove\n                </RemoveInputsBtn>\n            </div>\n        </>\n    )\n}\n\nexport default CategoryInput;\n","import React, { Component } from 'react';\nimport AnswerAndExampleInputs from './AnswerAndExampleInputs';\nimport Input from './Input';\nimport CategoryInput from './CategoryInput';\n\nlet INITIALSTATE = {\n  question: '',\n  answers: [{\n    answer: '',\n    example: ''\n  }],\n  links: [''],\n  categories: ['javascript'],\n  company: '',\n  tags: [''],\n  cardContentsStringified: ''\n}\n\nexport default class Form extends Component {\n  state = INITIALSTATE;\n\n  updateCardAttribute = (e, category, index) => {\n    let { name, value } = e.target,\n      newEntry,\n      object;\n\n    // Add new value to a string that's part of an object that's part of an Array within state\n    if (category && typeof this.state[category][index] === \"object\") {\n      newEntry = [...this.state[category]];\n      object = newEntry[index];\n      object[name] = value;\n\n      this.setState({\n        [category]: newEntry\n      })\n\n      //Add new value to a string that's part of an Array within state\n    } else if (Array.isArray(this.state[category])) {\n      newEntry = [...this.state[name]];\n      newEntry[index] = value;\n\n      this.setState({\n        [name]: newEntry\n      })\n\n      //Add new value to a string within state\n    } else {\n      newEntry = value;\n\n      this.setState({\n        [name]: newEntry\n      })\n    }\n\n  }\n\n  handleAddNewInputs = (category, index) => {\n    let field = this.state[category],\n      newFields = (category === \"answers\") ? { answer: '', example: '' } : '',\n      newArray;\n\n    newArray = [\n      ...field.slice(0, index + 1),\n      newFields,\n      ...field.slice(index + 1)\n    ];\n\n    this.setState({\n      [category]: newArray\n    })\n  }\n\n  handleRemoveInputs = (category, indexOfClickedBtn) => {\n    let newArray = this.state[category].filter((item, itemIndex) =>\n      itemIndex !== indexOfClickedBtn\n    );\n\n    this.setState({\n      [category]: newArray\n    })\n  }\n\n  resetState = () => {\n    this.setState({\n      question: '',\n      answers: [{\n        answer: '',\n        example: ''\n      }],\n      links: [''],\n      id: undefined,\n      categories: ['javascript'],\n      company: '',\n      tags: [''],\n      cardContentsStringified: ''\n    })\n  }\n\n  stringifyCardContents = item => {\n\n    if (typeof item === \"string\") {\n      item = item.toLowerCase();\n      this.setState({\n        cardContentsStringified: this.state.cardContentsStringified += ' ' + item\n      })\n    } else if (item && typeof item === \"object\") {\n      for (var key in item) {\n        if (key !== \"cardContentsStringified\") {\n          this.stringifyCardContents(item[key]);\n        }\n      }\n    }\n\n  }\n\n  createCard = (e) => {\n    e.preventDefault();\n\n    this.stringifyCardContents(this.state);\n\n    let { question, answers, links, tags, categories, company, cardContentsStringified, id } = this.state,\n      { createCard, toggleComponent } = this.props;\n\n\n    let newCard = {\n      question: question,\n      answers: answers,\n      links: links,\n      categories: categories,\n      company: company,\n      tags: tags,\n      cardContentsStringified: cardContentsStringified,\n      id: id\n    };\n\n    createCard(newCard);\n    toggleComponent();\n    this.resetState();\n  }\n\n  allowTabs = (e) => {\n    let t = e.target;\n\n    if (e.keyCode === 18) {\n      let v = t.value,\n        s = t.selectionStart,\n        e = t.selectionEnd;\n\n      t.value = v.substring(0, s) + '\\t' + v.substring(e);\n      t.selectionStart = t.selectionEnd = s + 1;\n      return false;\n    }\n  }\n\n  showState = () => {\n    console.log(this.state)\n  }\n\n  componentDidUpdate(prevProps) {\n    let { formContents } = this.props;\n\n    //We compare the props so we don't end up running an infinate loop\n    if (formContents.question !== prevProps.formContents.question) {\n      this.resetState();\n\n      for (var key in formContents) {\n        this.setState({\n          [key]: formContents[key]\n        })  \n      }\n    }\n  }\n\n\n  render() {\n    let { formVisible, toggleComponent } = this.props,\n      classes = formVisible ? 'cards-container cards-container--form' : 'cards-container cards-container--form hidden';\n\n\n    return (\n      <div className={classes}>\n\n        <div className=\"card card--form\">\n          <button onClick={this.showState}>SHOW STATE</button>\n          <form\n            className=\"form\"\n            onSubmit={this.createCard}\n          >\n            <h1>Create New Card</h1>\n            <h1\n              className=\"form__close-button\"\n              onClick={toggleComponent}>\n              X\n            </h1>\n            <p className=\"sub-header\">(Use OPTION key to indent)</p>\n            <div className=\"form__inputs-wrapper\">\n              <Input\n                label=\"Question\"\n                category=\"question\"\n                value={this.state.question}\n                includeAddRemoveButtons={false}\n                updateCardAttribute={(e) => this.updateCardAttribute(e)}\n                required={true}\n              />\n\n              {this.state.answers.map((item, index) => {\n                return (\n                  <AnswerAndExampleInputs\n                    category=\"answers\"\n                    answer={item['answer']}\n                    example={item['example']}\n                    updateCardAttribute={(e, category) => this.updateCardAttribute(e, category, index)}\n                    allowTabs={this.allowTabs}\n                    key={index}\n                    index={index}\n                    handleAddNewInputs={(category) => this.handleAddNewInputs(category, index)}\n                    handleRemoveInputs={(category) => this.handleRemoveInputs(category, index)}\n                  />\n                )\n              })}\n\n\n              {this.state.categories.map((item, index) => {\n                return (\n                  <CategoryInput\n                    label=\"Category\"\n                    key={index}\n                    index={index}\n                    value={item}\n                    updateCardAttribute={(e, category) => this.updateCardAttribute(e, category, index)}\n                    handleAddNewInputs={(category) => this.handleAddNewInputs(category, index)}\n                    handleRemoveInputs={(category) => this.handleRemoveInputs(category, index)}\n                  />\n                )\n              })}\n\n              <Input\n                label=\"Company\"\n                category=\"company\"\n                value={this.state.company}\n                includeAddRemoveButtons={false}\n                updateCardAttribute={(e) => this.updateCardAttribute(e)}\n              />\n\n              {this.state.links.map((item, index) => {\n                return (\n                  <Input\n                    label=\"Link\"\n                    category=\"links\"\n                    afterLabel=\"URL\"\n                    key={index}\n                    index={index}\n                    value={item}\n                    updateCardAttribute={(e, category) => this.updateCardAttribute(e, category, index)}\n                    handleAddNewInputs={(category) => this.handleAddNewInputs(category, index)}\n                    handleRemoveInputs={(category) => this.handleRemoveInputs(category, index)}\n                  />\n                )\n              })}\n\n              {this.state.tags.map((item, index) => {\n                return (\n                  <Input\n                    label=\"Tag\"\n                    category=\"tags\"\n                    key={index}\n                    index={index}\n                    value={item}\n                    updateCardAttribute={(e, category) => this.updateCardAttribute(e, category, index)}\n                    handleAddNewInputs={(category) => this.handleAddNewInputs(category, index)}\n                    handleRemoveInputs={(category) => this.handleRemoveInputs(category, index)}\n                  />\n                )\n              })}\n            </div>\n            <button className=\"hidden\" type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Card from '../Card/Card';\nimport Form from '../Form/Form';\nimport cardData from '../../data/cardData.json';\n\n\nlet INITIALFORMCONTENTS = {\n  question: '',\n  answers: [{\n    answer: '',\n    example: ''\n  }],\n  links: [''],\n  categories: ['javascript'],\n  company: '',\n  tags: [''],\n  cardContentsStringified: ''\n}\n\nexport default class App extends Component {\n  state = {\n    cards: cardData,\n    organizedCards: {},\n    formVisible: false,\n    formContents: INITIALFORMCONTENTS,\n    search: '',\n    filteredData: [],\n    newCardIdNum: cardData.length\n  }\n\n  componentDidMount = () => {\n    this.organizeCards(this.state.cards)\n  }\n\n  handleCreateCard = (newCard) => {\n    if (newCard.id === undefined) {\n      this.createCard(newCard);\n    } else {\n      this.updateExistingCard(newCard);\n    }\n  }\n\n  createCard = (newCard) => {\n    console.log(\"Creating New Card\");\n\n    let { newCardIdNum } = this.state,\n      increasedCardId;\n\n    newCard.id = newCardIdNum;\n    increasedCardId = newCardIdNum + 1;\n\n    this.setState({\n      newCardIdNum: increasedCardId,\n      cards: [...this.state.cards, newCard]\n    }, () => {\n      this.organizeCards(this.state.cards)\n    })\n  }\n\n  updateExistingCard = (newCard) => {\n    console.log(\"Updating existing card\")\n\n    let newCardArray = [...this.state.cards],\n      indexOfChosenCard;\n\n    for (let i = 0; i <= newCardArray.length; i++) {\n      let card = newCardArray[i];\n      // console.log(card.id);\n\n      if (card.id === newCard.id) {\n        indexOfChosenCard = i;\n        break;\n      }\n    }\n\n    newCardArray[indexOfChosenCard] = newCard;\n\n    this.setState({\n      cards: newCardArray\n    }, () => {\n      this.organizeCards(this.state.cards)\n    })\n  }\n\n  toggleComponent = () => {\n    let { formVisible } = this.state;\n\n    this.setState({\n      formVisible: !formVisible\n    })\n  }\n\n\n\n  organizeCards = (cards) => {\n    let organizedCards = {};\n\n    cards.map(card => {\n\n      card.categories && card.categories.map(category => {\n        category = category.toLowerCase();\n\n        if (organizedCards[category]) {\n          organizedCards[category].push(card);\n        } else {\n          organizedCards[category] = [card];\n        }\n        return '';\n      })\n      return '';\n    })\n\n    this.setState({\n      organizedCards: organizedCards\n    })\n  }\n\n  searchCards = cards => {\n    let currentList, newList = [],\n      searchTerm = this.state.search;\n\n    if (searchTerm !== \"\") {\n      currentList = cards;\n      newList = currentList.filter(item => item['cardContentsStringified'].toLowerCase().includes(searchTerm));\n    }\n\n    this.setState({\n      filteredData: newList\n    })\n  }\n\n  updateSearch = (e) => {\n    let { name, value } = e.target;\n    value = value.toLowerCase();\n\n    this.setState({\n      [name]: value\n    }, () => this.searchCards(this.state.cards)\n    )\n  }\n\n  handleDeleteItem = (id) => {\n    let newCardsArr = this.state.cards.filter(card => card.id !== id);\n\n    this.setState({\n      cards: newCardsArr\n    }, () => this.organizeCards(this.state.cards)\n    );\n  }\n\n  handleEditItem = (id) => {\n    let selectedCard = this.state.cards.filter(card => card.id === id)[0];\n\n    this.setState({\n      formVisible: true,\n      formContents: selectedCard\n    }, () => {\n      this.showState();\n    })\n  }\n\n  showState = () => {\n    console.log(this.state)\n  }\n\n  render() {\n    let { organizedCards, formVisible, formContents } = this.state;\n\n    return (\n      <>\n        {/* <button onClick={this.checkState}>Check State</button> */}\n        <header>\n          <div className=\"banner-text-container\">\n            <h1 className=\"banner-text\">Learn From Interview</h1>\n            <h1 className=\"banner-text banner-text--larger\">Fails</h1>\n            <button onClick={this.toggleComponent}>Create New Card</button>\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              name=\"search\"\n              onChange={this.updateSearch}\n              value={this.state.search}\n            />\n            <button onClick={this.showState}>SHOW STATE</button>\n          </div>\n        </header>\n\n\n        <Form\n          createCard={(newCard) => { this.handleCreateCard(newCard) }}\n          toggleComponent={this.toggleComponent}\n          formVisible={formVisible}\n          formContents={formContents}\n        />\n\n        <main>\n          {this.state.search.length > 0 &&\n            <>\n              <h1 className=\"dashbord__question-type\">SEARCH RESULTS</h1>\n              <div className=\"cards-container cards-container--questions\">\n\n                {this.state.filteredData.map((card, index) => {\n                  return (\n                    <Card\n                      key={card.id}\n                      id={card.id}\n                      cardData={card}\n                      handleDeleteItem={(id) => this.handleDeleteItem(id)}\n                    />\n                  )\n                })}\n              </div>\n            </>\n          }\n\n          {this.state.search.length === 0 &&\n\n            organizedCards && Object.keys(organizedCards).map((category, index) => {\n              let cards = organizedCards[category];\n              category = category.toUpperCase();\n\n              return (\n                <div key={index} className=\"dashbord__question-section\">\n                  <h1 className=\"dashbord__question-type\">{category}</h1>\n                  <div className=\"cards-container cards-container--questions\">\n\n                    {cards.map((card, index) => {\n                      return (\n                        <Card\n                          key={card.id}\n                          id={card.id}\n                          cardData={card}\n                          handleDeleteItem={(id) => this.handleDeleteItem(id)}\n                          handleEditItem={(id) => this.handleEditItem(id)}\n                        />\n                      )\n                    })}\n\n                  </div>\n                </div>\n              )\n            })\n          }\n        </main>\n\n      </>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}